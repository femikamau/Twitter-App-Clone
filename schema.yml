openapi: 3.0.3
info:
  title: Twitter-App Clone API
  version: 1.0.0
  description: A Twitter-App Clone API built with Django and Django REST Framework
paths:
  /api/v1/accounts/{id}/:
    get:
      operationId: accounts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - accounts
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: ''
  /api/v1/comments/{id}/:
    get:
      operationId: comments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this comment.
        required: true
      tags:
      - comments
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    put:
      operationId: comments_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    patch:
      operationId: comments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedComment'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    delete:
      operationId: comments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this comment.
        required: true
      tags:
      - comments
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/feed/:
    get:
      operationId: feed_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - feed
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReadPostList'
          description: ''
  /api/v1/login/:
    post:
      operationId: login_create
      tags:
      - login
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /api/v1/logout/:
    delete:
      operationId: logout_destroy
      tags:
      - logout
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/posts/{id}/:
    get:
      operationId: posts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - posts
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadPost'
          description: ''
    put:
      operationId: posts_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WritePost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WritePost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WritePost'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WritePost'
          description: ''
    patch:
      operationId: posts_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWritePost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWritePost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWritePost'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WritePost'
          description: ''
    delete:
      operationId: posts_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - posts
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/posts/{id}/comments/:
    get:
      operationId: posts_comments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - posts
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    post:
      operationId: posts_comments_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /api/v1/posts/{id}/like_post/:
    post:
      operationId: posts_like_post_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WritePost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WritePost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WritePost'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WritePost'
          description: ''
  /api/v1/posts/{id}/likes/:
    get:
      operationId: posts_likes_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - posts
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WritePost'
          description: ''
  /api/v1/posts/{id}/unlike_post/:
    delete:
      operationId: posts_unlike_post_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this post.
        required: true
      tags:
      - posts
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/profiles/:
    get:
      operationId: profiles_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - profiles
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedListProfileList'
          description: ''
  /api/v1/profiles/{user__username}/:
    get:
      operationId: profiles_retrieve
      parameters:
      - in: path
        name: user__username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - profiles
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveProfile'
          description: ''
    put:
      operationId: profiles_update
      parameters:
      - in: path
        name: user__username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListProfile'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProfile'
          description: ''
    patch:
      operationId: profiles_partial_update
      parameters:
      - in: path
        name: user__username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedListProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedListProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedListProfile'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProfile'
          description: ''
  /api/v1/profiles/{user__username}/follow/:
    post:
      operationId: profiles_follow_create
      parameters:
      - in: path
        name: user__username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListProfile'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProfile'
          description: ''
  /api/v1/profiles/{user__username}/followers/:
    get:
      operationId: profiles_followers_retrieve
      parameters:
      - in: path
        name: user__username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - profiles
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProfile'
          description: ''
  /api/v1/profiles/{user__username}/following/:
    get:
      operationId: profiles_following_retrieve
      parameters:
      - in: path
        name: user__username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - profiles
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProfile'
          description: ''
  /api/v1/profiles/{user__username}/posts/:
    get:
      operationId: profiles_posts_retrieve
      parameters:
      - in: path
        name: user__username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - profiles
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WritePost'
          description: ''
    post:
      operationId: profiles_posts_create
      parameters:
      - in: path
        name: user__username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WritePost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WritePost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WritePost'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WritePost'
          description: ''
  /api/v1/profiles/{user__username}/unfollow/:
    delete:
      operationId: profiles_unfollow_destroy
      parameters:
      - in: path
        name: user__username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - profiles
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/register/:
    post:
      operationId: register_create
      tags:
      - register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterAccount'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterAccount'
          description: ''
components:
  schemas:
    Account:
      type: object
      description: User Serializer
      properties:
        id:
          type: integer
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
      required:
      - email
      - first_name
      - id
      - last_name
      - url
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - password
      - token
      - username
    Comment:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        user:
          type: string
          readOnly: true
        post:
          type: string
          format: uri
          readOnly: true
        content:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - post
      - updated_at
      - url
      - user
    ListProfile:
      type: object
      properties:
        url:
          type: string
          readOnly: true
        username:
          type: string
          readOnly: true
        avatar:
          type: string
          format: uri
        bio:
          type: string
      required:
      - url
      - username
    PaginatedListProfileList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ListProfile'
    PaginatedReadPostList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ReadPost'
    PatchedComment:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        user:
          type: string
          readOnly: true
        post:
          type: string
          format: uri
          readOnly: true
        content:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedListProfile:
      type: object
      properties:
        url:
          type: string
          readOnly: true
        username:
          type: string
          readOnly: true
        avatar:
          type: string
          format: uri
        bio:
          type: string
    PatchedWritePost:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        content:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    ReadPost:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        user:
          type: string
          readOnly: true
        content:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - updated_at
      - url
      - user
    RegisterAccount:
      type: object
      properties:
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        username:
          type: string
        password1:
          type: string
          writeOnly: true
          title: Password
        password2:
          type: string
          writeOnly: true
          title: Confirm Password
      required:
      - email
      - first_name
      - last_name
      - password1
      - password2
      - username
    RetrieveProfile:
      type: object
      properties:
        url:
          type: string
          readOnly: true
        username:
          type: string
          readOnly: true
        avatar:
          type: string
          format: uri
        bio:
          type: string
      required:
      - url
      - username
    WritePost:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        content:
          type: string
          maxLength: 255
        image:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - updated_at
      - url
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
